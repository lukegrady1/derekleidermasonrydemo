name: Deploy to GitHub Pages

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next

      - name: Install dependencies
        run: npm ci

      - name: Debug Next.js configuration
        run: |
          echo "=== Debugging Next.js Configuration ==="
          echo "Checking for Next.js config files:"
          find . -name "next.config.*" -type f | head -10
          
          echo -e "\n=== Contents of next.config.mjs ==="
          if [ -f "next.config.mjs" ]; then
            cat next.config.mjs
          else
            echo "next.config.mjs not found"
          fi
          
          echo -e "\n=== Contents of next.config.js (if exists) ==="
          if [ -f "next.config.js" ]; then
            cat next.config.js
            echo "⚠️  WARNING: Multiple Next.js config files found!"
          else
            echo "next.config.js not found (good)"
          fi
          
          echo -e "\n=== Package.json scripts ==="
          grep -A 10 '"scripts"' package.json
          
          echo -e "\n=== Next.js version ==="
          npm list next
          
          echo -e "\n=== Check if tsconfig has any static export blocking settings ==="
          if [ -f "tsconfig.json" ]; then
            grep -i "export\|static\|server" tsconfig.json || echo "No export-related settings found"
          fi

      - name: Build with Next.js
        run: |
          echo "Starting Next.js build..."
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current directory: $(pwd)"
          
          # Check if environment variable is set
          if [ -z "$NEXT_PUBLIC_GOOGLE_MAPS_API_KEY" ]; then
            echo "⚠️  Warning: NEXT_PUBLIC_GOOGLE_MAPS_API_KEY not set, using placeholder"
            export NEXT_PUBLIC_GOOGLE_MAPS_API_KEY="placeholder-key-for-build"
          else
            echo "✅ NEXT_PUBLIC_GOOGLE_MAPS_API_KEY is set"
          fi
          
          echo "Starting build process..."
          # Run the build and capture both stdout and stderr
          npm run build 2>&1 | tee build.log
          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          
          echo "Build exit code: $BUILD_EXIT_CODE"
          echo "=== Full Build Log ==="
          cat build.log
          
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "❌ Build failed with exit code $BUILD_EXIT_CODE"
            exit $BUILD_EXIT_CODE
          else
            echo "✅ Build completed successfully"
          fi
          
          echo "=== Post-build directory contents ==="
          ls -la
        env:
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}

      - name: Force static export if needed
        run: |
          echo "Checking for out directory..."
          if [ ! -d "out" ]; then
            echo "❌ out directory not found, attempting manual export..."
            
            # Check if .next exists
            if [ -d ".next" ]; then
              echo ".next directory exists, trying manual export..."
              
              # Create the out directory and copy everything we need
              mkdir -p out
              
              echo "Copying static files..."
              # Copy all static assets from .next
              if [ -d ".next/static" ]; then
                mkdir -p out/_next
                cp -r .next/static out/_next/
                echo "✅ Copied _next/static"
              fi
              
              # Copy build manifest and other build files
              if [ -d ".next/build-manifest.json" ]; then
                cp .next/build-manifest.json out/_next/ 2>/dev/null || true
              fi
              
              # Copy standalone build if it exists (for static export)
              if [ -d ".next/standalone" ]; then
                cp -r .next/standalone/* out/ 2>/dev/null || true
                echo "✅ Copied standalone files"
              fi
              
              # Copy server-rendered HTML pages if they exist
              if [ -d ".next/server/app" ]; then
                echo "Copying server-rendered pages..."
                find .next/server/app -name "*.html" -type f | while read file; do
                  # Get relative path and create directory structure
                  rel_path=${file#.next/server/app/}
                  rel_dir=$(dirname "$rel_path")
                  
                  if [ "$rel_dir" != "." ]; then
                    mkdir -p "out/$rel_dir"
                  fi
                  
                  # Copy the HTML file
                  if [[ "$rel_path" == */index.html ]]; then
                    cp "$file" "out/$rel_path"
                  elif [[ "$rel_path" == *.html ]]; then
                    # Create directory for the page and copy as index.html
                    page_name=$(basename "$rel_path" .html)
                    mkdir -p "out/$rel_dir/$page_name"
                    cp "$file" "out/$rel_dir/$page_name/index.html"
                  fi
                done
                echo "✅ Copied server-rendered pages"
              fi
              
              # Copy public assets
              if [ -d "public" ]; then
                echo "Copying public assets..."
                cp -r public/* out/ 2>/dev/null || true
                echo "✅ Copied public assets"
              fi
              
              # Ensure we have a basic index.html if none exists
              if [ ! -f "out/index.html" ]; then
                echo "Creating fallback index.html..."
                if [ -f ".next/server/app/page.html" ]; then
                  cp .next/server/app/page.html out/index.html
                elif [ -f ".next/server/app/index.html" ]; then
                  cp .next/server/app/index.html out/index.html
                else
                  echo '<!DOCTYPE html><html><head><title>Derek Leider Masonry</title><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"></head><body><h1>Site is building...</h1><p>Manual static export in progress.</p></body></html>' > out/index.html
                fi
              fi
              
              # Create .nojekyll file for GitHub Pages
              touch out/.nojekyll
              
            else
              echo "❌ No .next directory found, build completely failed"
              exit 1
            fi
          else
            echo "✅ out directory found"
          fi
          
          echo "Final out directory contents:"
          find out -type f | head -20

      - name: Verify build output
        run: |
          echo "Checking build output..."
          echo "Directory contents after build:"
          ls -la
          
          if [ -d "out" ]; then
            echo "✅ out directory found"
            echo "Contents of out directory:"
            ls -la out/
            echo "Sample files in out:"
            find out -name "*.html" | head -5
            
            # Verify index.html exists and has content
            if [ -f "out/index.html" ]; then
              echo "✅ index.html exists"
              echo "Size: $(wc -c < out/index.html) bytes"
              echo "First few lines:"
              head -10 out/index.html
            else
              echo "❌ index.html missing"
              exit 1
            fi
          else
            echo "❌ out directory not found!"
            echo "Available directories:"
            ls -la | grep "^d"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
